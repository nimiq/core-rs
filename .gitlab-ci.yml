image: 'rust:latest'
variables:
  CARGO_HOME: $CI_PROJECT_DIR/cargo
  APT_CACHE_DIR: $CI_PROJECT_DIR/apt

stages:
  - build
  - image
  - test
  - coverage
  - deploy

.build:
  stage: build
  script:
    - rustc --version
    - cargo --version
    - cargo build --all
    - cargo build --all --release
  artifacts:
    paths:
      - target/debug/nimiq-client
      - target/release/nimiq-client

.test:
  stage: test
  script:
    - rustc --version
    - cargo --version
    - cargo test --all

.coverage:
  stage: coverage
  script:
    - rustc --version
    - cargo --version
    - apt-get update -yq
    - apt-get install -y cmake libelf-dev libdw-dev binutils-dev libiberty-dev jq
    - ./scripts/coverage.sh --all --tests
  artifacts:
    paths:
      - cov/cov

.clippy:
  stage: coverage
  script:
    - set +e
    - rustup component add clippy
    - cargo clippy --all

build-nightly:
  extends: .build
  image: 'rustlang/rust:nightly'

test-nightly:
  extends: .test
  image: 'rustlang/rust:nightly'
#  dependencies:
#    - build-nightly

coverage-nightly:
  extends: .coverage
  image: 'rustlang/rust:nightly'

clippy-nightly:
  extends: .clippy
  image: 'rustlang/rust:nightly'

#build-stable:
#  extends: .build

#test-stable:
#  extends: .test
#  dependencies:
#    - build-stable

#coverage-stable:
#  extends: .coverage
#  dependencies:
#    - build-stable

.pages:
  stage: deploy
  script:
    - cargo doc --no-deps
    - mv target/doc public
    - echo '<meta http-equiv="refresh" content="0; url=nimiq">' > public/index.html
  artifacts:
    paths:
      - public
  only:
    - master

# stable
#pages:
#  extends: .pages

# nightly
#pages:
#  extends: .pages
#  image: 'rustlang/rust:nightly'

docker:
  stage: image
  image: docker:18
  only:
    - branches
  services:
    - docker:18-dind
  dependencies:
    - build-nightly
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - >
      case "$CI_COMMIT_REF_NAME" in
        master) TAG=latest ;;
        *)      TAG=$(echo $CI_COMMIT_REF_NAME | sed -e 's/\//-/g') ;;
      esac
    - docker pull $CI_REGISTRY_IMAGE:$TAG || true
    - docker build --tag $CI_REGISTRY_IMAGE:$TAG .
    - docker push $CI_REGISTRY_IMAGE:$TAG
